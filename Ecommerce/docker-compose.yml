version: '3.4'

services:
  #catalogdb
  catalogdb:
    # image from Docker Hub
    image: mongo
   
  #basketdb
  basketdb:
    image: redis

  #discountdb
  discountdb:
    image: postgres

  #catalog.api
  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile

  #orderdb
  orderdb:
    image: mcr.microsoft.com/mssql/server:2022-latest

  #RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine

  #ElasticSearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    
  #Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3

  # this volumes for mongo_data is the name of the volume that will be created
  # /data/db is the path where the data will be stored in the mongo container
  # basket.api
  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
  
  #portainer
  portainer:
    image: portainer/portainer-ce

  #postgressAdmin
  pgadmin:
    image: dpage/pgadmin4

  #discount.api
  discount.api:
    image: ${DOCKER_REGISTRY-}discountapi
    build:
      context: .
      dockerfile: Services/discount/Discount.API/Dockerfile
    
  #ordering.api
  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile

  #ocelot
  ocelot.api:
    image: ${DOCKER_REGISTRY-}ocelotapi
    build:
     context: .
     dockerfile: ApiGateways\Ocelot.ApiGateways\Dockerfile

#volumes
volumes:
 mongo_data:
 portainer_data:
 postgres_data:  
 pgadmin_data:
 orderdb_data:
 elasticsearch_data:
